#!/usr/bin/env python

import sys
import os
import argparse
import subprocess
import stat
import time
from os.path import join as j
import shutil
import glob
import platform
import tempfile
import logging
import uuid
import re

def get_parser():
    parser = argparse.ArgumentParser(
        description="Install a minimal Fedora system inside a ZFS pool within a disk image or device"
    )
    parser.add_argument(
        "voldev", metavar="VOLDEV", type=str, nargs=1,
        help="path to volume (device to use or regular file to create)"
    )
    parser.add_argument(
        "--vol-size", dest="volsize", metavar="VOLSIZE", type=int,
        action="store", default=8000, help="volume size in MiB (default 7000)"
    )
    parser.add_argument(
        "--separate-boot", dest="bootdev", metavar="BOOTDEV", type=str,
        action="store", default=None, help="place /boot in a separate volume"
    )
    parser.add_argument(
        "--boot-size", dest="bootsize", metavar="BOOTSIZE", type=int,
        action="store", default=256, help="boot partition size in MiB, or boot volume size in MiB, when --separate-boot is specified (default 256)"
    )
    parser.add_argument(
        "--pool-name", dest="poolname", metavar="POOLNAME", type=str,
        action="store", default="tank", help="pool name (default tank)"
    )
    parser.add_argument(
        "--host-name", dest="hostname", metavar="HOSTNAME", type=str,
        action="store", default="localhost.localdomain", help="host name (default localhost.localdomain)"
    )
    parser.add_argument(
        "--root-password", dest="rootpassword", metavar="ROOTPASSWORD", type=str,
        action="store", default="tank", help="root password (default password)"
    )
    parser.add_argument(
        "--swap-size", dest="swapsize", metavar="SWAPSIZE", type=int,
        action="store", default=1024, help="swap volume size in MiB (default 1024)"
    )
    parser.add_argument(
        "--releasever", dest="releasever", metavar="VER", type=int,
        action="store", default=18, help="Fedora release version (default 18)"
    )
    parser.add_argument(
        "--luks-password", dest="lukspassword", metavar="LUKSPASSWORD", type=str,
        action="store", default=None, help="LUKS password to encrypt the ZFS volume with (default no encryption)"
    )
    parser.add_argument(
        "--no-cleanup", dest="nocleanup",
        action="store_true", default=False, help="if an error occurs, do not clean up working volumes"
    )
    return parser

def check_call(*args,**kwargs):
    cwd = kwargs.get("cwd", os.getcwd())
    logging.debug("Running %r in cwd %r", args[0], cwd)
    return subprocess.check_call(*args,**kwargs)

def check_output(*args,**kwargs):
    cwd = kwargs.get("cwd", os.getcwd())
    logging.debug("Running %r in cwd %r", args[0], cwd)
    return subprocess.check_output(*args,**kwargs)

def Popen(*args,**kwargs):
    cwd = kwargs.get("cwd", os.getcwd())
    logging.debug("Running %r in cwd %r", args[0], cwd)
    return subprocess.Popen(*args,**kwargs)

def filetype(dev):
    '''returns 'file' or 'blockdev' or 'doesntexist' for dev'''
    try:
        s = os.stat(dev)
    except OSError, e:
        if e.errno == 2: return 'doesntexist'
        raise
    if stat.S_ISBLK(s.st_mode): return 'blockdev'
    if stat.S_ISREG(s.st_mode): return 'file'
    assert 0, 'specified path %r is not a block device or a file'

def get_associated_lodev(path):
    output = ":".join(check_output(
        ["losetup", "-j",path]
    ).rstrip().split(":")[:-2])
    if output: return output
    return None

def losetup(path):
    check_call(
        ["losetup", "-P", "--find", "--show", path]
    )
    return get_associated_lodev(path)

def install_fedora(voldev, volsize, bootdev=None, bootsize=256,
                   poolname='tank', hostname='localhost.localdomain',
                   rootpassword='password', swapsize=1024,
                   releasever=18, lukspassword=None, do_cleanup=True):

    original_voldev = voldev
    original_bootdev = bootdev

    to_un_losetup = []
    to_luks_close = []
    to_export = []
    to_unmount = []

    def cleanup():
        for fs in to_unmount:
            check_call(["umount", fs])
        for pool in to_export:
            check_call(["zpool", "export", pool])
        for luksdev in to_luks_close:
            check_call(["cryptsetup", "luksClose", luksdev])
        for bdev in to_un_losetup:
            check_call(["losetup", "-d", bdev])

    try:
        voltype = filetype(voldev)
        if bootdev: boottype = filetype(bootdev)

        if voltype == 'doesntexist':
            check_call(
                ["dd", "if=/dev/zero", "of=%s"%voldev, "bs=%d"%(1024*1024), "count=0", "seek=%s"%(volsize)]
            )
            voltype = 'file'

        if bootdev and boottype == 'doesntexist':
            check_call(
                ["dd", "if=/dev/zero", "of=%s"%bootdev, "bs=%d"%(1024*1024), "count=0", "seek=%s"%(bootsize)]
            )
            boottype = 'file'

        if voltype == 'file':
            if get_associated_lodev(voldev):
                voldev = get_associated_lodev(voldev)
            else:
                voldev = losetup(voldev)
            to_un_losetup.append(voldev)
            voltype = 'blockdev'

        if bootdev and boottype == 'file':
            if get_associated_lodev(bootdev):
                bootdev = get_associated_lodev(bootdev)
            else:
                bootdev = losetup(bootdev)
            to_un_losetup.append(bootdev)
            boottype = 'blockdev'

        if bootdev:
            bootpart = bootdev + "-part1"
            if not os.path.exists(bootpart):
                bootpart = bootpart = bootdev + "p1"
            if not os.path.exists(bootpart):
                bootpart = None
            rootpart = voldev

            if not bootpart:
                cmd = ["fdisk", bootdev]
                p = Popen(cmd, stdin=subprocess.PIPE)
                p.communicate(
    '''n
    p
    1



    p
    w
    '''
                )
                retcode = p.wait()
                if retcode != 0: raise subprocess.CalledProcessError(retcode,cmd)
                time.sleep(2)

            bootpart = bootdev + "-part1"
            if not os.path.exists(bootpart):
                bootpart = bootpart = bootdev + "p1"
            if not os.path.exists(bootpart):
                assert 0, "partition 1 in device %r failed to be created"%bootdev

        else:
            bootpart = voldev + "-part1"
            if not os.path.exists(bootpart):
                bootpart = bootpart = voldev + "p1"
            if not os.path.exists(bootpart):
                bootpart = None
            rootpart = voldev + "-part2"
            if not os.path.exists(rootpart):
                rootpart = rootpart = voldev + "p2"
            if not os.path.exists(rootpart):
                rootpart = None

            assert (not bootpart and not rootpart) or (bootpart and rootpart), "weird shit"

            if not rootpart and not bootpart:
                cmd = ["fdisk", voldev]
                p = Popen(cmd, stdin=subprocess.PIPE)
                p.communicate(
    '''n
    p
    1

    +%dM

    n
    p
    2


    p
    w
    '''%bootsize
                )
                retcode = p.wait()
                if retcode != 0: raise subprocess.CalledProcessError(retcode,cmd)
                time.sleep(2)

            bootpart = voldev + "-part1"
            if not os.path.exists(bootpart):
                bootpart = voldev + "p1"
            if not os.path.exists(bootpart):
                assert 0, "partition 1 in device %r failed to be created"%voldev
            rootpart = voldev + "-part2"
            if not os.path.exists(rootpart):
                rootpart = rootpart = voldev + "p2"
            if not os.path.exists(rootpart):
                assert 0, "partition 2 in device %r failed to be created"%voldev

        try: output = check_output(["blkid", "-c", "/dev/null", bootpart])
        except subprocess.CalledProcessError: output = ""
        if 'TYPE="ext4"' not in output:
            check_call(["mkfs.ext4", "-L", "boot", bootpart])

        if lukspassword:
            try:
                output = check_output(["blkid", "-c", "/dev/null", rootpart])
                rootuuid = re.findall('UUID="(.*?)"', output)[0]
                luksuuid = "luks-" + rootuuid
            except subprocess.CalledProcessError, e:
                if e.returncode != 2: raise
                cmd = ["cryptsetup", "-y", "-v", "luksFormat", rootpart, '-']
                proc = Popen(cmd, stdin=subprocess.PIPE)
                proc.communicate(lukspassword)
                retcode = proc.wait()
                if retcode != 0: raise subprocess.CalledProcessError(retcode,cmd)
                output = check_output(["blkid", "-c", "/dev/null", rootpart])
                rootuuid = re.findall('UUID="(.*?)"', output)[0]
                luksuuid = "luks-" + rootuuid
            if not os.path.exists(j("/dev","mapper",luksuuid)):
                cmd = ["cryptsetup", "-y", "-v", "luksOpen", rootpart, luksuuid]
                proc = Popen(cmd, stdin=subprocess.PIPE)
                proc.communicate(lukspassword)
                retcode = proc.wait()
                if retcode != 0: raise subprocess.CalledProcessError(retcode,cmd)
            to_luks_close.append(luksuuid)
            rootpart = j("/dev","mapper",luksuuid)

        rootmountpoint = j("/mnt",poolname)
        try:
            check_call(["zfs", "list", "-H", "-o", "name", poolname],
                                stdout=file(os.devnull,"w"))
        except subprocess.CalledProcessError, e:
            try:
                check_call(["zpool", "import", "-f",
                                    "-R", rootmountpoint,
                                    poolname])
            except subprocess.CalledProcessError, e:
                check_call(["zpool", "create", "-m", "none",
                                    "-o", "ashift=12",
                                    "-O", "compression=on",
                                    "-O", "atime=off",
                                    "-O", "com.sun:auto-snapshot=false",
                                    "-R", rootmountpoint,
                                    poolname, rootpart])
        to_export.append(poolname)

        try:
            check_call(["zfs", "list", "-H", "-o", "name", j(poolname, "ROOT")],
                                stdout=file(os.devnull,"w"))
        except subprocess.CalledProcessError, e:
            check_call(["zfs", "create", j(poolname, "ROOT")])

        try:
            check_call(["zfs", "list", "-H", "-o", "name", j(poolname, "ROOT", "os")],
                                stdout=file(os.devnull,"w"))
        except subprocess.CalledProcessError, e:
            check_call(["zfs", "create", "-o", "mountpoint=/", j(poolname, "ROOT", "os")])

        try:
            check_call(["zfs", "list", "-H", "-o", "name", j(poolname, "swap")],
                                stdout=file(os.devnull,"w"))
        except subprocess.CalledProcessError, e:
            check_call(["zfs", "create", "-V", "%dM"%swapsize, j(poolname, "swap")])
        swappart = os.path.join("/dev/zvol", poolname, "swap")

        try: output = check_output(["blkid", "-c", "/dev/null", swappart])
        except subprocess.CalledProcessError: output = ""
        if 'TYPE="swap"' not in output:
            check_call(["mkswap", swappart])

        p = lambda _: j(rootmountpoint,_)

        # mount virtual file systems, creating their mount points as necessary
        for m in "boot sys proc etc".split():
            if not os.path.isdir(p(m)): os.mkdir(p(m))

        if not os.path.ismount(p("boot")):
            check_call(["mount", bootpart, p("boot")])
        to_unmount.append(p("boot"))

        if not os.path.ismount(p("sys")):
            check_call(["mount", "-t", "sysfs", "sysfs", p("sys")])
        to_unmount.append(p("sys"))

        if not os.path.ismount(p("proc")):
            check_call(["mount", "-t", "proc", "proc", p("proc")])
        to_unmount.append(p("proc"))

        # sync device files
        check_call(["rsync", "-ax", "--numeric-ids",
                            "--exclude=mapper",
                            "--exclude=zvol",
                            "--exclude=disk",
                            "--exclude=sd*",
                            "--exclude=zd*",
                            "--delete", "--delete-excluded",
                            "/dev/", p("dev/")])

        # make up a nice fstab file
        fstab = \
'''%s/ROOT/os / zfs defaults,x-systemd-device-timeout=0 0 0
LABEL=boot /boot ext4 noatime 0 1
/dev/zvol/%s/swap swap swap discard 0 0
'''%(poolname, poolname)
        file(p(j("etc", "fstab")),"w").write(fstab)

        # create a number of important files
        if not os.path.exists(p(j("etc", "mtab"))):
            os.symlink("../proc/self/mounts", p(j("etc", "mtab")))
        if not os.path.isfile(p(j("etc", "resolv.conf"))):
            file(p(j("etc", "resolv.conf")),"w").write(file(j("/etc", "resolv.conf")).read())
        if not os.path.exists(p(j("etc", "hostname"))):
            file(p(j("etc", "hostname")),"w").write(hostname)
        if not os.path.exists(p(j("etc", "hostid"))):
            randomness = file("/dev/urandom").read(4)
            file(p(j("etc", "hostid")),"w").write(randomness)
        hostid = file(p(j("etc", "hostid"))).read().encode("hex")
        hostid = "%s%s%s%s"%(hostid[6:8],hostid[4:6],hostid[2:4],hostid[0:2])

        if lukspassword:
            crypttab = \
'''%s UUID=%s none
'''%(luksuuid,rootuuid)
            file(p(j("etc", "crypttab")),"w").write(crypttab)
            os.chmod(p(j("etc", "crypttab")), 0600)

        def in_chroot(lst):
            return ["chroot", rootmountpoint] + lst

        # install base packages
        packages="basesystem rootfiles bash nano kernel binutils yum rsync NetworkManager rpm vim-minimal e2fsprogs passwd pam net-tools cryptsetup".split()
        try:
            check_call(in_chroot(["rpm", "-q"] + packages),
                                stdout=file(os.devnull,"w"), stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError:
            check_call(['yum', 'install', '-y', '--installroot=%s'%rootmountpoint,
                                    '--nogpgcheck', '--releasever=%d'%releasever] + packages)

        # install base packages
        packages="grub2 grub2-tools".split()
        try:
            check_call(in_chroot(["rpm", "-q"] + packages),
                                stdout=file(os.devnull,"w"), stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError:
            check_call(in_chroot(['yum', 'install', '-y'] + packages))

        # prevent future grub updates
        yumconf = file(p(j("etc","yum.conf"))).readlines()
        excludegrubset = bool([ l for l in yumconf if l.startswith("exclude=grub2") ])
        if not excludegrubset:
            yumconf.append("\nexclude=grub2\n")
            file(p(j("etc","yum.conf")),"w").writelines(yumconf)

        # set password
        pwfile = file(p(j("etc","shadow"))).readlines()
        pwnotset = bool([ l for l in pwfile if l.startswith("root:*:") ])
        if pwnotset:
            cmd = in_chroot(["passwd", "--stdin", "root"])
            pw = Popen(cmd, stdin=subprocess.PIPE)
            pw.communicate(rootpassword + "\n")
            retcode = pw.wait()
            if retcode != 0: raise subprocess.CalledProcessError(retcode,[cmd])

        # write grub config
        grubconfig = file(j("/etc","default","grub")).readlines()
        grubconfig.append("GRUB_DISABLE_LINUX_UUID=true\n")
        grubconfig.append("GRUB_PRELOAD_MODULES='part_msdos ext2'\n")
        withluksuuid = ''
        if lukspassword:
            withluksuuid = ' rd.luks.allow-discards rd.luks.uuid=%s'%luksuuid
        for n,l in enumerate(list(grubconfig)):
            if l.strip().startswith("GRUB_CMDLINE_LINUX="):
                grubconfig[n] = 'GRUB_CMDLINE_LINUX="%s"\n'%withluksuuid
        file(p(j("etc","default","grub")),"w").writelines(grubconfig)

        # deploy ZFS now
        packages="dkms kernel-devel libuuid-devel zlib-devel make autoconf automake gcc git libtool rpm-build mdadm parted lsscsi bc".split()
        try:
            check_call(in_chroot(["rpm", "-q"] + packages),
                                stdout=file(os.devnull,"w"), stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError:
            check_call(in_chroot(['yum', 'install', '-y'] + packages))

        arch = platform.machine()
        for project in "spl zfs".split():
            project_dir = p(j("usr","src",project))

            if not os.path.isdir(project_dir):
                cmd = ["git", "clone", "https://github.com/Rudd-O/%s"%project, project_dir]
                check_call(cmd)

            try:
                check_call(in_chroot(["rpm", "-q"] + [project, "%s-modules-dkms"%project]),
                                    stdout=file(os.devnull,"w"), stderr=subprocess.STDOUT)
            except subprocess.CalledProcessError:
                def getrpms():
                    return glob.glob(j(project_dir,"%s-*%s*.rpm"%(project, arch))) + \
                        glob.glob(j(project_dir,"%s-*%s*.rpm"%(project, "noarch")))

                files_to_install = getrpms()
                if not files_to_install:
                    cmd = in_chroot(["bash", "-c",
                        "cd /usr/src/%s && ./autogen.sh && ./configure && make rpm-utils rpm-dkms"%project])
                    check_call(cmd)
                    files_to_install = getrpms()

                files_to_install = [ f[len(rootmountpoint):] for f in files_to_install ]
                cmd = in_chroot(["rpm", "-ivh", "--replacefiles", "--replacepkgs"]) + files_to_install
                check_call(cmd)

        # patch grub mkconfig
        if "zfs" not in file(p(j("sbin","grub2-mkconfig"))).read():
            tempdir = tempfile.mkdtemp()
            try:
                if not os.path.isfile(p(j("sbin","grub2-mkconfig.orig"))):
                    shutil.copy2(p(j("sbin","grub2-mkconfig")), p(j("sbin","grub2-mkconfig.orig")))
                shutil.copy2(p(j("sbin","grub2-mkconfig.orig")), j(tempdir,"grub-mkconfig.in"))
                patchfile = file(p(j("usr","src","zfs","grub2","grub-mkconfig-zfs-support.diff")))
                check_call(["patch", "-p2"], stdin=patchfile, cwd=tempdir)
                patchfile.close()
                shutil.copy2(j(tempdir,"grub-mkconfig.in"), p(j("sbin","grub2-mkconfig")))
            finally:
                shutil.rmtree(tempdir)

        # create bootloader installer
        bootloadertext = \
    '''#!/bin/bash -xe
    export PATH=/sbin:/usr/sbin:/bin:/usr/bin
    mount /boot
    ln -sf /proc/self/mounts /etc/mtab
    grub2-install /dev/sda
    grub2-mkconfig > /boot/grub2/grub.cfg
    zfs inherit com.sun:auto-snapshot "%s"
    zpool reguid "%s"
    dracut -f /boot/initramfs-`uname -r`.img `uname -r`
    umount /boot
    rm -f /installbootloader
    sync
    sync
    echo 1 > /proc/sys/kernel/sysrq
    echo b > /proc/sysrq-trigger
    '''%(poolname, poolname)
        bootloaderpath = p("installbootloader")
        bootloader = file(bootloaderpath,"w")
        bootloader.write(bootloadertext)
        bootloader.close()
        os.chmod(bootloaderpath, 0755)

        # copy necessary boot files to a temp dir
        try:
            kernel = glob.glob(p(j("boot","vmlinuz-*")))
            initrd = glob.glob(p(j("boot","initramfs-*")))
            kerneltempdir = tempfile.mkdtemp()
            shutil.copy2(kernel[0], kerneltempdir)
            shutil.copy2(initrd[0], kerneltempdir)
        except (KeyboardInterrupt, Exception):
            shutil.rmtree(kerneltempdir)
            raise

    # end operating with the devices
    except BaseException:
        if do_cleanup:
            cleanup()
        raise

    cleanup()

    # install bootloader using qemu
    vmuuid = str(uuid.uuid1())
    cmd = [
        "qemu-kvm",
        "-name", hostname,
        "-M", "pc-1.2",
        "-enable-kvm", "-no-reboot",
        '-m', '1024',
        '-uuid', vmuuid,
        "-kernel", glob.glob(j(kerneltempdir,"vmlinuz-*"))[0],
        '-initrd', glob.glob(j(kerneltempdir,"initramfs-*"))[0],
        '-append', 'root=ZFS=%s/ROOT/os ro init=/installbootloader zfs_not_by_id=1%s'%(poolname,withluksuuid),
    ]
    if original_bootdev:
        cmd.extend([
            '-drive', 'file=%s,if=none,id=drive-ide0-0-0,format=raw'%original_bootdev,
            '-device', 'ide-hd,bus=ide.0,unit=0,drive=drive-ide0-0-0,id=ide0-0-0,bootindex=1',
            '-drive', 'file=%s,if=none,id=drive-ide0-1-0,format=raw'%original_voldev,
            '-device', 'ide-hd,bus=ide.1,unit=0,drive=drive-ide0-1-0,id=ide0-1-0,bootindex=2',
        ])
    else:
        cmd.extend([
            '-drive', 'file=%s,if=none,id=drive-ide0-0-0,format=raw'%original_voldev,
            '-device', 'ide-hd,bus=ide.0,unit=0,drive=drive-ide0-0-0,id=ide0-0-0,bootindex=1',
        ])
    try:
        subprocess.check_call(cmd)
    finally:
        shutil.rmtree(kerneltempdir)

def main():
    logging.basicConfig(level=logging.DEBUG)
    args = get_parser().parse_args()
    cleanup = not args.nocleanup
    install_fedora(
        args.voldev[0], args.volsize, args.bootdev, args.bootsize,
        args.poolname, args.hostname, args.rootpassword,
        args.swapsize, args.releasever, args.lukspassword, cleanup
    )
    return 0

if __name__ == "__main__":
    sys.exit(main())